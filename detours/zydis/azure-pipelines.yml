# C/C++ with GCC
# Build your C/C++ project with GCC using make.
# Add steps that publish test results, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/c-cpp/gcc

strategy:
  matrix:
    'Linux':
      imageName: 'ubuntu-16.04'
      cmakeArgs: ''
      runTests: 'true'
    'Linux (dev mode & release)':
      imageName: 'ubuntu-16.04'
      cmakeArgs: '-DZYAN_DEV_MODE=ON -DCMAKE_BUILD_TYPE=Release'
      runTests: 'true'
  #  'Linux (no libc)':
  #    imageName: 'ubuntu-16.04'
  #    cmakeArgs: '-DZYAN_NO_LIBC=ON'
  #    runTests: 'false'
    'Mac':
      imageName: 'macos-10.13'
      cmakeArgs: ''
      runTests: 'true'
    'Mac (no libc)':
      imageName: 'macos-10.13'
      cmakeArgs: '-DZYAN_NO_LIBC=ON'
      runTests: 'false'
    'Windows':
      imageName: 'vs2017-win2016'
      cmakeArgs: ''
      runTests: 'true'
    'Windows (no libc)':
      imageName: 'vs2017-win2016'
      cmakeArgs: '-DZYAN_NO_LIBC=ON'
      runTests: 'false'

pool:
  vmImage: $(imageName)

steps:
- bash: |
    git submodule update --init
  displayName: 'Cloning submodules'
- bash: |
    mkdir build
    cd build
    cmake $(cmakeArgs) ..
  displayName: 'Configuring'
- bash: |
    cmake --build build --config Release
  displayName: 'Building'
- bash: |
    cd build
    ./ZydisInfo -64 cc
  displayName: 'Disassembling INT3'
  condition: and(eq(variables['runTests'], 'true'), ne(variables['Agent.OS'], 'Windows_NT'))
- bash: |
    cd build
    Release\\ZydisInfo.exe -64 cc
  displayName: 'Disassembling INT3'
  condition: and(eq(variables['runTests'], 'true'), eq(variables['Agent.OS'], 'Windows_NT'))
